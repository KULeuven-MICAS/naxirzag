from util.snake.configs import get_snax_gemmx_config
from quantized_matmul import main as get_quantized_matmul
from aggregate import aggregate_results

config = get_snax_gemmx_config(snax_mlir_path="../../snax-mlir")
config["snaxoptflags"] = ",".join(
    [
        "preprocess",
        "convert-linalg-to-kernel",
        "insert-accfg-op{accelerator=snax_gemmx}",
        "dispatch-kernels",
        "convert-linalg-to-dart",
        "dart-fuse-operations",
        "snax-bufferize",
        "alloc-to-global",
        "set-memory-space",
        "dart-scheduler",
        "set-memory-layout",
        "realize-memref-casts",
        "insert-sync-barrier",
        "dispatch-regions{nb_cores=2}",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "test-add-mcycle-around-launch",
        "convert-accfg-to-csr",
        "snax-copy-to-dma",
        "snax-lower-mcycle",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)

config["mlirtransformflags"] = [
    "--pass-pipeline='builtin.module(transform-interpreter{debug-bind-trailing-args=linalg.quantized_matmul}, test-transform-dialect-erase-schedule)'"
]


module snax_rules:
    snakefile:
        "../../snax-mlir/util/snake/snax.smk"
    config:
        config


use rule * from snax_rules as snax_*

files = ["quantized_matmul"]

values = [16,32]

# Rules
rule all:
    input:
        "tiled_quantized_matmul_traces.json",
        "quantized_matmul_results.csv"

rule get_dataframe:
    input:
        expand("{file}_{m}_{n}_{k}_traces.json", file=files, m=values, n=values, k=values),
    output:
        "{file}_results.csv"
    run:
        aggregate_results(wildcards.file)
        

rule generate_quantized_matmul:
    output:
        "quantized_matmul_{m}_{n}_{k}.mlir",
    wildcard_constraints:
        m=r"\d+",
        n=r"\d+",
        k=r"\d+"
    run:
        get_quantized_matmul(int(wildcards.m), int(wildcards.n), int(wildcards.k), f"quantized_matmul_{wildcards.m}_{wildcards.n}_{wildcards.k}.mlir")


rule generate_tiled_quantized_matmul:
    output:
        "tiled_quantized_matmul.transform.mlir",
    script:
        "tiled_quantized_matmul.py"


rule apply_transforms_mlir:
    input:
        "{file}.transform.mlir",
    output:
        "{file}.mlir",
    shell:
        "{config[mlir-opt]} {config[mlirtransformflags]} --mlir-print-op-generic --mlir-print-local-scope -o {output} {input}"


rule link_snax_binary:
    input:
        "{file}.o",
        "main.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"
