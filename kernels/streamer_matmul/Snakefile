from util.snake.configs import get_snax_gemmx_config
from quantized_matmul import main as get_quantized_matmul
from aggregate import aggregate_results, plot_results
from pathlib import Path

config = get_snax_gemmx_config(snax_mlir_path="../../snax-mlir")
config["snaxoptflags"] = ",".join(
    [
        "preprocess",
        "convert-linalg-to-kernel",
        "insert-accfg-op{accelerator=snax_gemmx}",
        "dispatch-kernels",
        "convert-linalg-to-dart",
        "dart-fuse-operations",
        "snax-bufferize",
        "alloc-to-global",
        "set-memory-space",
        "dart-scheduler",
        "set-memory-layout",
        "realize-memref-casts",
        "insert-sync-barrier",
        "dispatch-regions{nb_cores=2}",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "test-add-mcycle-around-launch",
        "convert-accfg-to-csr",
        "snax-copy-to-dma",
        "snax-lower-mcycle",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)

config["mlirtransformflags"] = [
    "--pass-pipeline='builtin.module(transform-interpreter{debug-bind-trailing-args=linalg.quantized_matmul}, test-transform-dialect-erase-schedule)'"
]


module snax_rules:
    snakefile:
        "../../snax-mlir/util/snake/snax.smk"
    config:
        config


use rule * from snax_rules as snax_*


files = ["quantized_matmul"]

values = [16, 32]


# Rules
rule all:
    input:
        #"tiled_quantized_matmul_traces.json",
        #"quantized_matmul_plot.html",
        #expand("{file}_{m}_{n}_{k}_cmes.pickle", file=files, m=values, n=values, k=values),
        expand("hw_{hw_config}_build/snax_cluster/target/snitch_cluster/bin/snitch_cluster.vlt", hw_config=["cfg1", "cfg2"])


rule get_zigzag_cme:
    input:
        "{file}_{m}_{n}_{k}.mlir",
    output:
        "{file}_{m}_{n}_{k}_cmes.pickle",
    shell:
        "praxis-opt -p preprocess {input[0]} -t zigzag -o {output[0]}"


rule get_dataframe:
    input:
        jsons=expand(
            "{file}_{m}_{n}_{k}_traces.json", file=files, m=values, n=values, k=values
        ),
        pickles=expand(
            "{file}_{m}_{n}_{k}_cmes.pickle", file=files, m=values, n=values, k=values
        ),
    output:
        "{file}_results.hd5",
    run:
        aggregate_results(wildcards.file, input.jsons, input.pickles)


rule plot_dataframe:
    input:
        "{file}_results.hd5",
    output:
        "{file}_plot.html",
    run:
        plot_results(wildcards.file)


rule generate_quantized_matmul:
    output:
        "quantized_matmul_{m}_{n}_{k}.mlir",
    wildcard_constraints:
        m=r"\d+",
        n=r"\d+",
        k=r"\d+",
    run:
        get_quantized_matmul(
            int(wildcards.m),
            int(wildcards.n),
            int(wildcards.k),
            f"quantized_matmul_{wildcards.m}_{wildcards.n}_{wildcards.k}.mlir",
        )


rule generate_tiled_quantized_matmul:
    output:
        "tiled_quantized_matmul.transform.mlir",
    script:
        "tiled_quantized_matmul.py"


rule apply_transforms_mlir:
    input:
        "{file}.transform.mlir",
    output:
        "{file}.mlir",
    shell:
        "{config[mlir-opt]} {config[mlirtransformflags]} --mlir-print-op-generic --mlir-print-local-scope -o {output} {input}"


rule link_snax_binary:
    input:
        "{file}.o",
        "main.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"


rule prep_hardware:
    input:
        "{hw_config}.hjson",
    output:
        directory=directory("hw_{hw_config}_build"),
        marker="hw_{hw_config}_build/prep.done"
    shell:
        "mkdir -p {output.directory} && cp -R ../../snax_cluster/ {output.directory}/ && touch {output.marker}"


rule build_hardware:
    input:
        "{hw_config}.hjson",
        "hw_{hw_config}_build/prep.done"
    params:
        hw_config_path= lambda wildcards: Path(wildcards.hw_config).resolve()
    output:
        "hw_{hw_config}_build/snax_cluster/target/snitch_cluster/bin/snitch_cluster.vlt"
    run:
        #shell("make CFG_OVERRIDE={params.hw_config_path}.hjson -C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster rtl-gen ")
        #shell("make CFG_OVERRIDE={params.hw_config_path}.hjson -C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster sw -j{threads}")
        shell("OBJCACHE=ccache make CFG_OVERRIDE={params.hw_config_path}.hjson -C hw_{wildcards.hw_config}_build/snax_cluster/target/snitch_cluster bin/snitch_cluster.vlt -j8 NPROC=8")
